cmake_minimum_required(VERSION 2.6.3)
project(GCVL)

# Set a default build type for single-configuration
# CMake generators if no build type is set.
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
endif(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

if ((NOT CMAKE_BUILD_TYPE MATCHES Debug) AND
    (NOT CMAKE_BUILD_TYPE MATCHES RelWithDebInfo) AND
    (NOT CMAKE_BUILD_TYPE MATCHES MinSizeRel))
   set(CMAKE_BUILD_TYPE Release)
endif ((NOT CMAKE_BUILD_TYPE MATCHES Debug) AND
    (NOT CMAKE_BUILD_TYPE MATCHES RelWithDebInfo) AND
    (NOT CMAKE_BUILD_TYPE MATCHES MinSizeRel))

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)

# Select flags.
IF (MSVC)
    MESSAGE("-- Current build compiler is cl")
    ADD_DEFINITIONS(-D_ISOC9X_SOURCE) 
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
    ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /arch:AVX /favor:INTEL64")
	#SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /FORCE:MULTIPLE")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_SOURCE_DIR}/bin)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_SOURCE_DIR}/bin)
	
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/lib)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/lib)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_SOURCE_DIR}/lib)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_SOURCE_DIR}/lib)
	
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/lib)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/lib)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_SOURCE_DIR}/lib)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_SOURCE_DIR}/lib)
ENDIF ()

IF(CMAKE_COMPILER_IS_GNUCXX)
	set(CMAKE_CXX_FLAGS "-Wall")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
	set(CMAKE_CXX_FLAGS_RELEASE "-O2")
	set(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g")
ENDIF()

#OpenCL
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
#find_package(OpenCL REQUIRED)
#include_directories(${OPENCL_INCLUDE_DIRS})

#Boost
#IF (MSVC)
#	set(Boost_USE_STATIC_LIBS ON)
#ENDIF ()
#find_package(Boost 1.48 COMPONENTS thread system iostreams filesystem REQUIRED)
#include_directories(${Boost_INCLUDE_DIRS})

#OpenMP
FIND_PACKAGE(OpenMP REQUIRED)
IF(OPENMP_FOUND)
	message("OPENMP FOUND")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ENDIF()

#Eigen
#find_package(Eigen REQUIRED)
#include_directories(${EIGEN_INCLUDE_DIRS})

set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
add_subdirectory(src/gcvl)
add_subdirectory(src/test_gcvl)

message(STATUS "*${CMAKE_BUILD_TYPE}* build being prepared")

# Create the PCMConfig.cmake file for the build tree
configure_file(GCVLConfig.cmake.in "${PROJECT_SOURCE_DIR}/bin/GCVLConfig.cmake" @ONLY)
