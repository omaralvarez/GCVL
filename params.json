{"name":"GCVL","tagline":"GPU Computer Vision Library","body":"# GPU Computer Vision Library [![Build Status](https://travis-ci.org/omaralvarez/GCVL.svg?branch=master)](https://travis-ci.org/omaralvarez/GCVL) [![Coverage Status](https://coveralls.io/repos/omaralvarez/GCVL/badge.svg?branch=master&service=github)](https://coveralls.io/github/omaralvarez/GCVL?branch=master)\r\nMulti-platform (Windows, Unix and Mac OS) C++/OpenCL/CUDA library with several Computer Vision algorithms.\r\n###Building:\r\n```bash\r\ncmake -G \"Unix Makefiles\" -DBUILD_OPENCL=ON -DBUILD_CUDA=ON -DBUILD_TESTS=ON .\r\nmake\r\n```\r\n###Example:\r\n```cpp\r\n#include <gcvl/blockmatching.h>\r\n#include <gcvl/opencl/oclcore.h>\r\n#include <gcvl/opencl/oclblockmatching.h>\r\n#include <gcvl/cuda/cudacore.h>\r\n#include <gcvl/cuda/cudablockmatching.h>\r\n\r\n//argv[1] -> path to left image   argv[2] -> path to right image\r\nint main(int argc, char *argv[]) {\r\n\r\n  int dim = 5, maxDisp = 16;\r\n  bool norm = true;\r\n  std::unique_ptr<unsigned char[]> output;\r\n  \r\n  gcvl::BlockMatching bmCPU(argv[1], argv[2], output);\r\n  bmCPU.setAggDim(dim);\r\n  bmCPU.setMaxDisp(maxDisp);\r\n  bmCPU.setNormalize(norm);\r\n  bmCPU.compute();\r\n  \r\n  gcvl::opencl::Core coreOCL;\r\n  gcvl::opencl::BlockMatching bmOCL(coreOCL, argv[1], argv[2], output);\r\n  bmOCL.setAggDim(dim);\r\n  bmOCL.setMaxDisp(maxDisp);\r\n  bmOCL.setNormalize(norm);\r\n  bmOCL.compute();\r\n  \r\n  gcvl::cuda::Core coreCUDA;\r\n  gcvl::cuda::BlockMatching bmCUDA(coreCUDA, argv[1], argv[2], output);\r\n  bmCUDA.setAggDim(dim);\r\n  bmCUDA.setMaxDisp(maxDisp);\r\n  bmCUDA.setNormalize(norm);\r\n  bmCUDA.compute();\r\n  \r\n  return 0;\r\n  \r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}